generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model LinkedInUser {
    entityUrn        String  @id @unique
    firstName        String
    headline         String
    lastName         String
    memorialized     Boolean
    publicIdentifier String  @unique
    profilePicture   String?

    from LinkedInConnection[] @relation("from")
    to   LinkedInConnection[] @relation("to")

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    secondarySyncRecords SecondarySyncRecord[]
    primarySyncRecords   PrimarySyncRecord[]

    @@index([firstName, lastName, publicIdentifier])
}

model LinkedInConnection {
    from LinkedInUser @relation("from", fields: [fromId], references: [entityUrn])
    to   LinkedInUser @relation("to", fields: [toId], references: [entityUrn])

    entityUrn String?

    fromId String
    toId   String

    connectedAt Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([fromId, toId])
}

model PrimarySyncRecord {
    id Int @id @default(autoincrement())

    startCount       Int
    endCount         Int
    syncStart        Int
    syncEnd          Int
    syncSuccess      Boolean
    syncErrorMessage String?

    linkedInUser          LinkedInUser @relation(fields: [linkedInUserEntityUrn], references: [entityUrn])
    linkedInUserEntityUrn String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SecondarySyncRecord {
    id Int @id @default(autoincrement())

    syncStartPos     Int     @default(0)
    syncTotal        Int?
    syncStart        Int
    syncEnd          Int?
    syncSuccess      Boolean
    syncInProgress   Boolean
    syncErrorMessage String?

    linkedInUser          LinkedInUser @relation(fields: [linkedInUserEntityUrn], references: [entityUrn])
    linkedInUserEntityUrn String       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    linkedInUser   LinkedInUser?
    linkedInUserId String?       @unique

    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
